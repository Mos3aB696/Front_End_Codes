/*SASS => Syntactically Awesome Style Sheet */
/*
  What is the differances between @use and @import?
  => @import 
  * @import is also a CSS feature, and the differences can be confusing
  * If you @import the same file multiple times, it can slow down compilation,
    cause override conflicts, and generate duplicate output.
  * Everything is in the global namespace, including third-party packages – so
    my color() function might override your existing color() function, or vice versa.
  * When you use a function like color(). it’s impossible to know exactly
    where it was defined. Which @import does it come from?

  => @use 
  * The file is only imported once, no matter how many times you @use it in a project.
  * Variables, mixins, and functions (what Sass calls “members”) that start
    with an underscore (_) or hyphen (-) are considered private, and not imported.
  * Members from the used file (buttons.scss in this case) are only made
    available locally, but not passed along to future imports.
  * Similarly, @extends will only apply up the chain; extending selectors
    in imported files, but not extending files that import this one.
  * All imported members are namespaced by default.

  Note: When you
    @use a file, Sass automatically generates a namespace based on the file name:
    @use 'buttons'; // Creates a 'buttons' namespace.

    You can't access to the variables defined in buttons, Because the imported 
    features are namespaced.

    the solution =>
    1- use a new period-divided syntax to access them:
    2- Using as * adds a module to the root namespace, so no prefix is required.

*/
// Import global-rules
@use "./sass/Layout/global-rules";
/*
The _ (underscore) is a partial for scss. That means the stylesheet its going to be imported (@import)
to a main stylesheet. The advantage on using partials is that you can use many files 
to organize your code and everything will be compiled on a single file.
*/
// Import contact
@use "./sass/Contact/contact";
@use "./sass/Variables/colors" as *;

//  Global And Local Variables Like JavaScript.
/*
Variables are a way to store information that you can re-use later.

With Sass, you can store information in variables, like:
[strings | numbers | colors | booleans | lists | nulls]
Sass uses the $ symbol, followed by a name, to declare variables:
  Fun Fact
    Sass variables, like all Sass identifiers, treat hyphens and underscores
    as identical. This means that $font-size and $font_size both refer to 
    the same variable.
*/
/*
  Heads up
    CSS has variables of its own, which are totally different than Sass variables.

  Know the differences!
  * Sass variables are all compiled away by Sass. CSS variables are included
    in the CSS output.
  * CSS variables can have different values for different elements,
    but Sass variables only have one value at a time.
  * Sass variables are imperative, which means if you use a variable and then change
    its value, the earlier use will stay the same. CSS variables are declarative,
    which means if you change the value, it’ll affect both earlier uses and later uses.
*/

$spicial-color: yellow;
.test {
  $spicial-color: black !global;
  color: $spicial-color;
}
.test-2 {
  color: $spicial-color;
}
/*
  What is the differance between Scss and Sass
  Sass has two syntaxes! The SCSS syntax (.scss) is used most commonly.
    It's a superset of CSS, which means all valid CSS is also valid SCSS.
    The indented syntax (.sass) is more unusual: it uses indentation rather
    than curly braces to nest statements, and newlines instead of semicolons
    to separate them. All our examples are available in both syntaxes.
*/
// Global Variables
/*
Tip: Global variables should be defined outside any rules.
It could be wise to define all global variables in its own file,
named "_globals.scss", and include the file with the @include keyword.
*/

$alt_color: green;
.header {
  color: $alt_color;
}

.footer {
  // Local Variables
  // Use !global Flag To Switch Local Variables To Global Variables
  $alt_color: black !global;
  color: $alt_color;
}
/*
  Heads Up 
    The !global flag may only be used to set a variable that has already
    been declared at the top level of a file. It may not be used to
    declare a new variable.
*/
.copyright {
  background-color: $alt_color;
}
.sidebar {
  // background-color: colors.$main;
  color: $alt;
}

// ---------------------------------------------------------------
// Nesting & Parent Element

// Nesting
.parent {
  font-weight: bold;
  .child {
    font-size: 25px;
    .grand-child {
      font-size: 15px;
    }
  }
}

.parent-one,
.parent-two {
  padding: 20px;
  .child {
    padding: 10px;
  }
}
.parent > {
  .child {
    font-size: 20px;
  }
  .test {
    font-weight: bold;
  }
}
.parent {
  > .child {
    font-size: 20px;
  }
  .test {
    font-weight: bold;
  }
  + p {
    font-weight: bolder;
  }
}
.parent + {
  .child {
    font-size: 20px;
  }
  .test {
    font-weight: bold;
  }
  p {
    font-weight: bolder;
  }
}
.parent {
  > {
    .one {
      font-size: 20px;
    }
    .two {
      font-size: 20px;
    }
  }
  .not-direct-child {
    font-weight: bold;
  }
}
// Parent
.box {
  display: none;
  .title {
    font-size: 10px;
  }
  .description {
    font-weight: bold;
  }
  // <element class="box red">
  // & Refer To The Parent Element
  &.red {
    color: red;
  }
  &.green {
    color: green;
  }
  &:hover {
    background-color: #fff;
  }
  &:hover .title {
    background-color: #00f;
  }
  &:hover + label {
    color: #fff;
  }
  // & Refer To The Parent Element
  &:not(:first-child) {
    color: #0f0;
  }
  :not(&) {
    font-weight: normal;
  }
  [dir="rtl"] & {
    direction: rtl;
  }
}
//---------------------------------------------------------------------------
// Property Declarations And Placeholder
.box {
  font-size: 20px;
  // Make Group With Font Properties.
  font: {
    size: 15px;
    weight: bold;
    family: sans-serif;
  }
  padding: 10px;
  margin: auto {
    top: 10px;
    bottom: 5px;
  }
  border: 1px solid red {
    right-color: green;
  }
}
.main-box {
  background-color: #505050;
  padding: 10px;
  border: 1px solid #ccc;
  color: #fff;
}
.article {
  font-size: 20px;
  color: green;
  /*
    * The @extend directive lets you share a set of CSS properties from one selector to another.
    ! If the .main-box class is a part of the your project
  */
  @extend .main-box;
}
.ads {
  @extend .main-box;
  font-size: 25px;
  font-weight: normal;
}
.test {
  transform: translateX(10px);
  transition: 0.5s;
}
/*
* Placeholder help you to be more productive without rewriting properties all over
  again that you need in your CSS library.
* You can customise your needs and made a small library out of it.
  Include placeholders in your SCSS and use them every time you want it in your project
*/
/*
  * If you want use only placeholder and there is not class by this name you can use %
*/
%source {
  background-color: #3ee;
  font-style: italic;
}
.box_one {
  @extend %source;
  font-family: "Courier New", Courier, monospace;
}
.box_two {
  @extend %source;
  font-family: "Gill Sans", "Gill Sans MT", Calibri, "Trebuchet MS", sans-serif;
}
/*
 * The @mixin directive lets you create CSS code that is to be reused throughout the website.
 * The @include directive is created to let you use (include) the mixin.
*/
@mixin important-text {
  background-color: red;
  color: black;
  padding: 10px;
  border: none;
}
.test {
  @include important-text();
}
//---------------------------------------------------------------------------
// Control Flow => If And Else
$theme: "dark";
.page {
  @if $theme == "light" {
    background-color: #fff;
    color: #444;
  } @else {
    background-color: #444;
    color: #fff;
  }
}

$rounded: true;
.box {
  @extend .main-box;
  /*
    * You can use the condition inlined
    ? (condition, if-true, if-false)
  */
  border-radius: if($rounded, 6px, null);
}
//---------------------------------------------------------------------------
// Practice On If And Else
body {
  background-color: #444;
}
$direction: "top";
.arrow-div {
  @extend .main-box;
  font-size: 20px;
  display: flex;
  justify-content: center;
  align-items: center;
  width: 300px;
  height: 300px;
  position: relative;
  margin: 50px auto;
  &::before {
    content: "";
    position: absolute;
    border: 20px solid transparent;
    @if $direction == "left" {
      left: -40px;
      top: 50%;
      transform: translateY(-50%);
      border-right-color: red;
    } @else if $direction == "right" {
      right: -40px;
      top: 50%;
      transform: translateY(-50%);
      border-left-color: red;
    } @else if $direction == "top" {
      top: -40px;
      left: 50%;
      transform: translateX(-50%);
      border-bottom-color: red;
    } @else if $direction == "bottom" {
      bottom: -40px;
      left: 50%;
      transform: translateX(-50%);
      border-top-color: red;
    } @else {
      @error 'Your Direction #{$direction} Is Not Valid';
    }
  }
}
//---------------------------------------------------------------------------
// Interpolation
/*Uses of Interpolation:
  * To use dynamically created names as a property name,
    a variable or for any other same purposes.
  * To create a very reusable code; where you can define a property name, strings,
    selector names etc, as a variable.
*/
$company: "Mos3aB";
$position: "top";
/*
 * unique-id() => Returns a randomly-generated unquoted string that’s 
    guaranteed to be a valid CSS identifier and to be unique within the current
    Sass compilation.
*/
.ad-#{$company}-#{unique-id()} {
  font-size: 20px;
  background-image: url("imgs/#{$company}.png");
  #{$position}: 0;
}
// Interpolation With Mixin
@mixin corner-icon($name, $top-or-bottom, $left-or-right) {
  .icon-#{$name} {
    background-image: url("/icons/#{$name}.svg");
    position: absolute;
    #{$top-or-bottom}: 0;
    #{$left-or-right}: 0;
  }
}
@include corner-icon("mail", bottom, right);
/*
  Conclusion:
  We can use this technique to make our stylesheet more dynamic and use
  the power of SASS/SCSS to write less code which evaluates into more CSS code.
*/
//---------------------------------------------------------------------------
// Comments

// This Comment Will Not Show In Css File
/* This Comment Will Show In Css File But Not In Compressed Mode */
/*! This Comment Will Show In Css File And In Compressed Mode */

.box /*Multiple 
Lines 
Comment*/ {
  font-size: 30px; // Inline Comment
}
// You Can Use Interpolation Inside Comment
/* This Comment Contains Interpolation => #{$company} */

/*
  When writing style libraries using Sass, you can use comments to document the mixins,
  functions, variables, and placeholder selectors that your library provides,
  as well as the library itself. These are comments are read by the SassDoc tool,
  which uses them to generate beautiful documentation.
*/
/// Function To Do Bla Bla Bla
///
/// @param {num}
/// The Number To Deal With
/// @return {int}
